From c209cc3f749984c96748c543fb2da3695b30e8c9 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=96zg=C3=BCr=20Kele=C5=9F?= <ozgur.keles@ries.com.tr>
Date: Tue, 2 Jul 2013 12:03:19 +0300
Subject: [PATCH] =?UTF-8?q?mach-mxs-ocotp=5Fproc=20archlinuxarm=20kernel?=
 =?UTF-8?q?=20i=C3=A7in=20proc=20dosya=20sistemine=20unique-id=20eklendi.?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 arch/arm/mach-mxs/Makefile     |  2 +-
 arch/arm/mach-mxs/ocotp_proc.c | 76 ++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 77 insertions(+), 1 deletion(-)
 create mode 100644 arch/arm/mach-mxs/ocotp_proc.c

diff --git a/arch/arm/mach-mxs/Makefile b/arch/arm/mach-mxs/Makefile
index 3d3c8a9..ec09b3a 100644
--- a/arch/arm/mach-mxs/Makefile
+++ b/arch/arm/mach-mxs/Makefile
@@ -1,5 +1,5 @@
 # Common support
-obj-y := icoll.o ocotp.o system.o timer.o mm.o
+obj-y := icoll.o ocotp.o system.o timer.o mm.o ocotp_proc.o
 
 obj-$(CONFIG_PM) += pm.o
 
diff --git a/arch/arm/mach-mxs/ocotp_proc.c b/arch/arm/mach-mxs/ocotp_proc.c
new file mode 100644
index 0000000..ead33d3
--- /dev/null
+++ b/arch/arm/mach-mxs/ocotp_proc.c
@@ -0,0 +1,76 @@
+/*
+ * Copyright 2013 Ries. All Rights Reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/module.h>
+#include <linux/proc_fs.h>
+#include <mach/common.h>
+
+
+#define OCOTP_WORD_COUNT		0x20
+
+static struct buffer {
+	size_t size;
+    const char *data;
+} my_buffer;
+
+static int
+read_buffer(char* page, char** start, off_t off, int count,
+	int* eof, void* data)
+{
+	struct buffer *buffer = (struct buffer *)data;
+
+	if (off >= buffer->size) {
+		*eof = 1;
+		return 0;
+	}
+
+	count = min((int) (buffer->size - off), count);
+
+	memcpy(page, &buffer->data[off], count);
+
+	return count;
+}
+
+static int __init init_ocotp_procfs(void)
+{
+    struct proc_dir_entry *unique_id_entry;
+
+    my_buffer.size = sizeof(u32) * OCOTP_WORD_COUNT;
+    my_buffer.data = (const char *)mxs_get_ocotp();
+
+    if (my_buffer.data != NULL) {
+
+        unique_id_entry = create_proc_read_entry("unique-id", 0444,
+                                                 NULL, read_buffer, &my_buffer);
+        if (!unique_id_entry)
+            return -ENOMEM;
+        return 0;
+    }
+    return -EBUSY;
+}
+
+static void __exit exit_ocotp_procfs(void)
+{
+    remove_proc_entry("unique-id", NULL);
+}
+
+module_init(init_ocotp_procfs);
+module_exit(exit_ocotp_procfs);
+
+
+MODULE_AUTHOR("Özgür Keleş <ozgur.keles@ries.com.tr>");
+MODULE_DESCRIPTION("proc file for MXS unique-id");
+MODULE_LICENSE("GPL");
+MODULE_VERSION("0.0.1");
+
-- 
1.8.3.1

